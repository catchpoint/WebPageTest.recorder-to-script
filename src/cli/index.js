import meow from "meow";
import inquirer from "inquirer";
import { runTransformsOnChromeRecording } from "../transform.js";
import { expandedFiles } from "../utils.js";

const cli = meow(
  `
  Usage
    $ npx wptrectest <path-of-recording.json> [options]

  Options

    -d,  --dry            Dry run the output of the transformed recordings
    -o,  --output         Output location of the files generated by the exporter

  Examples

    $ npx wptrectest recordings.json
    $ npx wptrectest recordings/*.json
`,
  {
    importMeta: import.meta,
    flags: {
      dry: {
        type: "boolean",
        alias: "d",
      },
      output: {
        type: "string",
        alias: "o",
      },
    },
  }
);

inquirer
  .prompt([
    {
      type: "input",
      name: "files",
      message: "Enter directory or files that should be converted from Recorder JSON to Webpagetest:",
      default: "./sample-recordings/simple-recorder.json", //change this to .
      filter(files) {
        return new Promise((resolve) => {
          resolve(files.split(/\s+/).filter((f) => f.trim().length > 0));
        });
      },
    },
    {
      type: "input",
      name: "outputPath",
      message: "Mention the output directory name?",
      when: () => !cli.input.length && !cli.flags.dry,
      default: "webpagetest",
    },
  ])
  .then((answers) => {
    const { files: recordingFiles, outputPath: outputFolder } = answers;
    const files = cli.input.length ? cli.input : recordingFiles;
    const filesExpanded = expandedFiles(files);

    if (!filesExpanded) {
      console.log(`No recording files found matching ${files.join(" ")}`);
      return null;
    }

    const outputPath = cli.flags?.output?.length ? cli.flags.output : outputFolder;

    return runTransformsOnChromeRecording({
      files: filesExpanded,
      outputPath: outputPath,
      flags: cli.flags,
    });
  })
  .catch((error) => {
    if (error.isTtyError) {
      // Prompt couldn't be rendered in the current environment
    } else {
      console.log(error);
    }
  });
